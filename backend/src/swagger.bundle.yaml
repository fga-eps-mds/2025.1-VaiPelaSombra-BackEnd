openapi: 3.0.0
info:
  title: VaiPelaSombra API
  version: 1.0.0
  description: API documentation for VaiPelaSombra Backend

servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /users:
    get:
      summary: Retrieve a list of users
      tags: [Users]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateUserInput'
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        '201':
          description: The user was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserInput'

  /users/{id}:
    get:
      summary: Retrieve a single user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserInput'
    put:
      summary: Update an existing user
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        '200':
          description: The user was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserInput'
    delete:
      summary: Delete a user
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The user was successfully deleted

  /users/{id}/preferences:
    get:
      summary: Retrieve travel preferences for a user
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Travel preferences for the user
    post:
      summary: Save or update a user's travel preferences
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                travelPreferences:
                  type: object
                  properties:
                    travelerType:
                      type: string
                      enum: [AVENTUREIRO, CULTURAL, RELAXAMENTO, GASTRONOMICO]
                    travelFrequency:
                      type: string
                      enum: [BIMESTRAL, TRIMESTRAL, SEMESTRAL, ANUAL]
                    averageBudget:
                      type: number
      responses:
        '200':
          description: Preferences saved successfully
    put:
      summary: Update a user's travel preferences
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                travelPreferences:
                  type: object
                  properties:
                    travelerType:
                      type: string
                      enum: [AVENTUREIRO, CULTURAL, RELAXAMENTO, GASTRONOMICO]
                    travelFrequency:
                      type: string
                      enum: [BIMESTRAL, TRIMESTRAL, SEMESTRAL, ANUAL]
                    averageBudget:
                      type: number
      responses:
        '200':
          description: Preferences updated successfully
        '400':
          description: Invalid input
        '404':
          description: Preferences not found

  /users/{id}/interests:
    get:
      summary: Get travel interests selected by a user
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of travel interests selected by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
        '404':
          description: Preferences not found
    post:
      summary: Save travel interests for a user (first-time setup)
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                travelInterestsIds:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: Interests saved successfully
        '400':
          description: No interests selected
    put:
      summary: Update travel interests for a user
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                travelInterestsIds:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Interests updated successfully
        '400':
          description: No interests selected
        '404':
          description: Preferences not found

  /planoViagem/{userId}:
    get:
      summary: Retorna todos os planos de viagem de um usuário
      tags: [PlanoViagem]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de planos de viagem
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanoViagem'
        '404':
          description: Usuário não encontrado
    post:
      summary: Cria um novo plano de viagem
      tags: [PlanoViagem]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nome]
              properties:
                nome:
                  type: string
                destino:
                  type: string
                  nullable: true
                dataInicio:
                  type: string
                  format: date-time
                  nullable: true
                dataFim:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        '201':
          description: Plano de viagem criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanoViagem'
        '400':
          description: Dados inválidos

  /planoViagem/{userId}/{id}:
    get:
      summary: Retorna um plano de viagem específico
      tags: [PlanoViagem]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes do plano de viagem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanoViagem'
        '404':
          description: Plano de viagem não encontrado
    put:
      summary: Atualiza um plano de viagem existente
      tags: [PlanoViagem]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nome]
              properties:
                nome:
                  type: string
                destino:
                  type: string
                  nullable: true
                dataInicio:
                  type: string
                  format: date-time
                  nullable: true
                dataFim:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        '200':
          description: Plano de viagem atualizado com sucesso
        '404':
          description: Plano de viagem não encontrado
    delete:
      summary: Exclui um plano de viagem
      tags: [PlanoViagem]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Plano de viagem excluído com sucesso
        '404':
          description: Plano de viagem não encontrado

  /login:
    post:
      summary: Authenticate user
      tags: [Login]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

components:
  schemas:
    CreateUserInput:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        profileBio:
          type: string
          nullable: true
        profileImage:
          type: string
          nullable: true

    PlanoViagem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        image:
          type: string
        date:
          type: string
          format: date-time
        daysLeft:
          type: integer
        faded:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        profileBio:
          type: string
          nullable: true
        profileImage:
          type: string
          nullable: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
