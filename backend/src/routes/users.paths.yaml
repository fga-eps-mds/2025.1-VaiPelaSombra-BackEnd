/users:
  get:
    summary: Retrieve a list of users
    tags: [Users]
    responses:
      "200":
        description: A list of users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateUserInput"
  post:
    summary: Create a new user
    tags: [Users]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserInput"
    responses:
      "201":
        description: The user was successfully created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
/users/{id}:
  get:
    summary: Retrieve a single user by ID
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user ID
    responses:
      "200":
        description: A single user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
  put:
    summary: Update an existing user
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserInput"
    responses:
      "200":
        description: The user was successfully updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
  delete:
    summary: Delete a user
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user ID
    responses:
      "200":
        description: The user was successfully deleted
/users/{id}/preferences:
  get:
    summary: Retrieve travel preferences for a user
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user ID
    responses:
      "200":
        description: Travel preferences for the user
  post:
    summary: Save or update a user's travel preferences
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        example: 1
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              travelPreferences:
                type: object
                properties:
                  travelerType:
                    type: string
                    enum: [AVENTUREIRO, CULTURAL, RELAXAMENTO, GASTRONOMICO]
                    example: AVENTUREIRO
                  travelFrequency:
                    type: string
                    enum: [BIMESTRAL, TRIMESTRAL, SEMESTRAL, ANUAL]
                    example: ANUAL
                  averageBudget:
                    type: number
                    example: 0
    responses:
      "200":
        description: Preferences saved successfully
  put:
    summary: Update a user's travel preferences
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        example: 1
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              travelPreferences:
                type: object
                properties:
                  travelerType:
                    type: string
                    enum: [AVENTUREIRO, CULTURAL, RELAXAMENTO, GASTRONOMICO]
                    example: RELAXAMENTO
                  travelFrequency:
                    type: string
                    enum: [BIMESTRAL, TRIMESTRAL, SEMESTRAL, ANUAL]
                    example: SEMESTRAL
                  averageBudget:
                    type: number
                    example: 3500
    responses:
      "200":
        description: Preferences updated successfully
      "404":
        description: Preferences not found
      "400":
        description: Invalid input
/users/{id}/interests:
  get:
    summary: Get travel interests selected by a user
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        example: 1
    responses:
      "200":
        description: List of travel interests selected by the user
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  name:
                    type: string
                    example: CULTURAL
      "404":
        description: Preferences not found
  post:
    summary: Save travel interests for a user (first-time setup)
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        example: 1
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              travelInterestsIds:
                type: array
                items:
                  type: integer
                example: [1, 3, 4]
    responses:
      "201":
        description: Interests saved successfully
      "400":
        description: No interests selected
  put:
    summary: Update travel interests for a user
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        example: 1
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              travelInterestsIds:
                type: array
                items:
                  type: integer
                example: [2, 4, 5]
    responses:
      "200":
        description: Interests updated successfully
      "400":
        description: No interests selected
      "404":
        description: Preferences not found

/login:
  post:
    summary: Authenticate user
    tags: [Login]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: "joao@email.com"
              password:
                description: password to login
                type: string
                example: "S3NH@SEGURS"
    responses:
      "200":
        description: sucessfly loggged
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "jxaslcbhdjhasijis"
                user:
                  type: object
                  properties:
                    id:
                      type: number
                      example: 1
                    email:
                      type: string
                      example: "joao@email.com"
/planoViagem/{userId}:
  get:
    summary: Retorna todos os planos de viagem de um usuário
    tags: [PlanoViagem]
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
        description: ID do usuário
    responses:
      "200":
        description: Lista de planos de viagem
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PlanoViagem'
      "404":
        description: Usuário não encontrado
    post:
      summary: Cria um novo plano de viagem
      tags: [PlanoViagem]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Nome do plano de viagem
                destino:
                  type: string
                  nullable: true
                  description: Destino da viagem
                dataInicio:
                  type: string
                  format: date-time
                  nullable: true
                  description: Data de início da viagem
                dataFim:
                  type: string
                  format: date-time
                  nullable: true
                  description: Data de término da viagem
              required:
                - nome
      responses:
        "201":
          description: Plano de viagem criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanoViagem'
        "400":
          description: Dados inválidos

/planoViagem/{userId}/{id}:
  get:
    summary: Retorna um plano de viagem específico
    tags: [PlanoViagem]
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
        description: ID do usuário
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID do plano de viagem
    responses:
      "200":
        description: Detalhes do plano de viagem
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanoViagem'
      "404":
        description: Plano de viagem não encontrado

  put:
    summary: Atualiza um plano de viagem existente
    tags: [PlanoViagem]
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
        description: ID do usuário
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID do plano de viagem
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              nome:
                type: string
                description: Nome do plano de viagem
              destino:
                type: string
                nullable: true
                description: Destino da viagem
              dataInicio:
                type: string
                format: date-time
                nullable: true
                description: Data de início da viagem
              dataFim:
                type: string
                format: date-time
                nullable: true
                description: Data de término da viagem
            required:
              - nome
    responses:
      "200":
        description: Plano de viagem atualizado com sucesso
      "404":
        description: Plano de viagem não encontrado

  delete:
    summary: Exclui um plano de viagem
    tags: [PlanoViagem]
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
        description: ID do usuário
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID do plano de viagem
    responses:
      "200":
        description: Plano de viagem excluído com sucesso
      "404":
        description: Plano de viagem não encontrado





