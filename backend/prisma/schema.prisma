// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)
  email             String            @unique @db.VarChar(100)
  password          String            @db.VarChar(100)
  createdAt         DateTime          @default(now())
  profileBio        String?           @db.VarChar(500)
  profileImage      String?           @db.VarChar(500)
  reviews           Review[]
  itineraries       Itinerary[]
  travelPreferences TravelPreference?
}

model TravelPreference {
  id              Int              @id @default(autoincrement())
  userId          Int              @unique
  user            User             @relation(fields: [userId], references: [id])
  travelInterests TravelInterest[]
}

model TravelInterest {
  id                Int                @id @default(autoincrement())
  label             String
  travelPreferences TravelPreference[]
}

model Itinerary {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(100)
  startDate       DateTime
  endDate         DateTime
  itineraryStatus String   @db.VarChar(20)
  lodgingBudget   Decimal? @db.Decimal(7, 2)
  foodBudget      Decimal? @db.Decimal(7, 2)
  totalBudget     Decimal? @db.Decimal(7, 2)

  transports        Transport[]
  activities        Activity[]
  users             User[]
  destinations      Destination[]
  requiredDocuments RequiredDocument[]
}

model RequiredDocument {
  id          Int       @id @default(autoincrement())
  content     String    @db.VarChar(800)
  itineraryId Int
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
}

model Transport {
  id          Int       @id @default(autoincrement())
  type        String    @db.VarChar(100)
  cost        Decimal   @db.Decimal(6, 2)
  departure   DateTime?
  arrival     DateTime?
  duration    DateTime?
  description String?   @db.VarChar(500)
  itineraryId Int
  Itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
}

model Destination {
  id           Int     @id @default(autoincrement())
  title        String  @db.VarChar(100)
  description  String  @db.VarChar(500)
  longitude    String  @db.VarChar(100)
  latitude     String  @db.VarChar(100)
  localClimate String? @db.VarChar(500)
  timeZone     String? @db.VarChar(100)

  itineraries           Itinerary[]
  reviews               Review[]
  localEvents           LocalEvent[]
  survivalTips          SurvivalTip[]
  recommendedActivities Activity[]
}

model Review {
  id            Int         @id @default(autoincrement())
  content       String      @db.VarChar(1500)
  imageUrl      String?     @db.VarChar(500)
  userId        Int
  destinationId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model Activity {
  id          Int       @id @default(autoincrement())
  location    String    @db.VarChar(100)
  title       String    @db.VarChar(100)
  price       Decimal?  @db.Decimal(5, 2)
  startTime   DateTime
  endTime     DateTime
  duration    DateTime?
  description String?   @db.VarChar(500)

  itineraryId   Int
  itinerary     Itinerary    @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  destination   Destination? @relation(fields: [destinationId], references: [id])
  destinationId Int?
}

model LocalEvent {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  destinationId Int
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model SurvivalTip {
  id            Int         @id @default(autoincrement())
  content       String      @db.VarChar(500)
  destinationId Int
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}
